#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require("../app");
var debug = require("debug")("boss-hiring-server:server");
var http = require("http");
const mongoose = require("mongoose");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "4000");
app.set("port", port);

/**
 * Create HTTP server.
 */

var server1 = http.createServer();

/**
 * Set up web socket server
 */
const webSocketSeverPort = require('../config').wsServerConfig.port;
const webSocketSever = require("websocket").server;
server1.listen(webSocketSeverPort);
const wsSever = new webSocketSever({
  httpServer: server1,
});

const wsSocketListen = require("./webSocket").wsSocketListen;
wsSocketListen(wsSever);

var server2 = http.createServer(app);

/**
 * Connect to MongoDB
 */
const dbUrl = require("../config").dbConfig.url;
connectDB(dbUrl);

/**
 * Listen on provided port, on all network interfaces.
 */
function listenOnServer() {
  server2.listen(port);
  server2.on("error", onError);
  server2.on("listening", onListening);
}

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server2.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}

/**
 * Connect to MongoDB
 */

function connectDB(url) {
  mongoose.connection
    .on("error", console.error.bind(console, "connection error:"))
    .on("disconnected", connectDB)
    .once("open", function () {
      console.log("db connection opens");
      listenOnServer();
    });
  return mongoose.connect(url, {
    useNewUrlParser: true,
    useUnifiedTopology: true,
  });
}
